// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostsCreateHandlerFunc turns a function with the right signature into a posts create handler
type PostsCreateHandlerFunc func(PostsCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostsCreateHandlerFunc) Handle(params PostsCreateParams) middleware.Responder {
	return fn(params)
}

// PostsCreateHandler interface for that can handle valid posts create params
type PostsCreateHandler interface {
	Handle(PostsCreateParams) middleware.Responder
}

// NewPostsCreate creates a new http.Handler for the posts create operation
func NewPostsCreate(ctx *middleware.Context, handler PostsCreateHandler) *PostsCreate {
	return &PostsCreate{Context: ctx, Handler: handler}
}

/*PostsCreate swagger:route POST /thread/{slug_or_id}/create postsCreate

Создание новых постов

Добавление новых постов в ветку обсуждения на форум.

Все посты, созданные в рамках одного вызова данного метода должны иметь одинаковую дату создания (Post.Created).


*/
type PostsCreate struct {
	Context *middleware.Context
	Handler PostsCreateHandler
}

func (o *PostsCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostsCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
