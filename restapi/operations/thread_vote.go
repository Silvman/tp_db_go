// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ThreadVoteHandlerFunc turns a function with the right signature into a thread vote handler
type ThreadVoteHandlerFunc func(ThreadVoteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ThreadVoteHandlerFunc) Handle(params ThreadVoteParams) middleware.Responder {
	return fn(params)
}

// ThreadVoteHandler interface for that can handle valid thread vote params
type ThreadVoteHandler interface {
	Handle(ThreadVoteParams) middleware.Responder
}

// NewThreadVote creates a new http.Handler for the thread vote operation
func NewThreadVote(ctx *middleware.Context, handler ThreadVoteHandler) *ThreadVote {
	return &ThreadVote{Context: ctx, Handler: handler}
}

/*ThreadVote swagger:route POST /thread/{slug_or_id}/vote threadVote

Проголосовать за ветвь обсуждения

Изменение голоса за ветвь обсуждения.

Один пользователь учитывается только один раз и может изменить своё
мнение.


*/
type ThreadVote struct {
	Context *middleware.Context
	Handler ThreadVoteHandler
}

func (o *ThreadVote) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewThreadVoteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
