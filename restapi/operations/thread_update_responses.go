// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/Silvman/tech-db-forum/models"
)

// ThreadUpdateOKCode is the HTTP code returned for type ThreadUpdateOK
const ThreadUpdateOKCode int = 200

/*ThreadUpdateOK Информация о ветке обсуждения.


swagger:response threadUpdateOK
*/
type ThreadUpdateOK struct {

	/*
	  In: Body
	*/
	Payload *models.Thread `json:"body,omitempty"`
}

// NewThreadUpdateOK creates ThreadUpdateOK with default headers values
func NewThreadUpdateOK() *ThreadUpdateOK {

	return &ThreadUpdateOK{}
}

// WithPayload adds the payload to the thread update o k response
func (o *ThreadUpdateOK) WithPayload(payload *models.Thread) *ThreadUpdateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the thread update o k response
func (o *ThreadUpdateOK) SetPayload(payload *models.Thread) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ThreadUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ThreadUpdateNotFoundCode is the HTTP code returned for type ThreadUpdateNotFound
const ThreadUpdateNotFoundCode int = 404

/*ThreadUpdateNotFound Ветка обсуждения отсутсвует в форуме.


swagger:response threadUpdateNotFound
*/
type ThreadUpdateNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewThreadUpdateNotFound creates ThreadUpdateNotFound with default headers values
func NewThreadUpdateNotFound() *ThreadUpdateNotFound {

	return &ThreadUpdateNotFound{}
}

// WithPayload adds the payload to the thread update not found response
func (o *ThreadUpdateNotFound) WithPayload(payload *models.Error) *ThreadUpdateNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the thread update not found response
func (o *ThreadUpdateNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ThreadUpdateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
