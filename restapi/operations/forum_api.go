// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewForumAPI creates a new Forum instance
func NewForumAPI(spec *loads.Document) *ForumAPI {
	return &ForumAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		BinConsumer:         runtime.ByteStreamConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		ClearHandler: ClearHandlerFunc(func(params ClearParams) middleware.Responder {
			return middleware.NotImplemented("operation Clear has not yet been implemented")
		}),
		ForumCreateHandler: ForumCreateHandlerFunc(func(params ForumCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation ForumCreate has not yet been implemented")
		}),
		ForumGetOneHandler: ForumGetOneHandlerFunc(func(params ForumGetOneParams) middleware.Responder {
			return middleware.NotImplemented("operation ForumGetOne has not yet been implemented")
		}),
		ForumGetThreadsHandler: ForumGetThreadsHandlerFunc(func(params ForumGetThreadsParams) middleware.Responder {
			return middleware.NotImplemented("operation ForumGetThreads has not yet been implemented")
		}),
		ForumGetUsersHandler: ForumGetUsersHandlerFunc(func(params ForumGetUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation ForumGetUsers has not yet been implemented")
		}),
		PostGetOneHandler: PostGetOneHandlerFunc(func(params PostGetOneParams) middleware.Responder {
			return middleware.NotImplemented("operation PostGetOne has not yet been implemented")
		}),
		PostUpdateHandler: PostUpdateHandlerFunc(func(params PostUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation PostUpdate has not yet been implemented")
		}),
		PostsCreateHandler: PostsCreateHandlerFunc(func(params PostsCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation PostsCreate has not yet been implemented")
		}),
		StatusHandler: StatusHandlerFunc(func(params StatusParams) middleware.Responder {
			return middleware.NotImplemented("operation Status has not yet been implemented")
		}),
		ThreadCreateHandler: ThreadCreateHandlerFunc(func(params ThreadCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation ThreadCreate has not yet been implemented")
		}),
		ThreadGetOneHandler: ThreadGetOneHandlerFunc(func(params ThreadGetOneParams) middleware.Responder {
			return middleware.NotImplemented("operation ThreadGetOne has not yet been implemented")
		}),
		ThreadGetPostsHandler: ThreadGetPostsHandlerFunc(func(params ThreadGetPostsParams) middleware.Responder {
			return middleware.NotImplemented("operation ThreadGetPosts has not yet been implemented")
		}),
		ThreadUpdateHandler: ThreadUpdateHandlerFunc(func(params ThreadUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation ThreadUpdate has not yet been implemented")
		}),
		ThreadVoteHandler: ThreadVoteHandlerFunc(func(params ThreadVoteParams) middleware.Responder {
			return middleware.NotImplemented("operation ThreadVote has not yet been implemented")
		}),
		UserCreateHandler: UserCreateHandlerFunc(func(params UserCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation UserCreate has not yet been implemented")
		}),
		UserGetOneHandler: UserGetOneHandlerFunc(func(params UserGetOneParams) middleware.Responder {
			return middleware.NotImplemented("operation UserGetOne has not yet been implemented")
		}),
		UserUpdateHandler: UserUpdateHandlerFunc(func(params UserUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation UserUpdate has not yet been implemented")
		}),
	}
}

/*ForumAPI Тестовое задание для реализации проекта "Форумы" на курсе по базам данных в
Технопарке Mail.ru (https://park.mail.ru).
*/
type ForumAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// BinConsumer registers a consumer for a "application/octet-stream" mime type
	BinConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// ClearHandler sets the operation handler for the clear operation
	ClearHandler ClearHandler
	// ForumCreateHandler sets the operation handler for the forum create operation
	ForumCreateHandler ForumCreateHandler
	// ForumGetOneHandler sets the operation handler for the forum get one operation
	ForumGetOneHandler ForumGetOneHandler
	// ForumGetThreadsHandler sets the operation handler for the forum get threads operation
	ForumGetThreadsHandler ForumGetThreadsHandler
	// ForumGetUsersHandler sets the operation handler for the forum get users operation
	ForumGetUsersHandler ForumGetUsersHandler
	// PostGetOneHandler sets the operation handler for the post get one operation
	PostGetOneHandler PostGetOneHandler
	// PostUpdateHandler sets the operation handler for the post update operation
	PostUpdateHandler PostUpdateHandler
	// PostsCreateHandler sets the operation handler for the posts create operation
	PostsCreateHandler PostsCreateHandler
	// StatusHandler sets the operation handler for the status operation
	StatusHandler StatusHandler
	// ThreadCreateHandler sets the operation handler for the thread create operation
	ThreadCreateHandler ThreadCreateHandler
	// ThreadGetOneHandler sets the operation handler for the thread get one operation
	ThreadGetOneHandler ThreadGetOneHandler
	// ThreadGetPostsHandler sets the operation handler for the thread get posts operation
	ThreadGetPostsHandler ThreadGetPostsHandler
	// ThreadUpdateHandler sets the operation handler for the thread update operation
	ThreadUpdateHandler ThreadUpdateHandler
	// ThreadVoteHandler sets the operation handler for the thread vote operation
	ThreadVoteHandler ThreadVoteHandler
	// UserCreateHandler sets the operation handler for the user create operation
	UserCreateHandler UserCreateHandler
	// UserGetOneHandler sets the operation handler for the user get one operation
	UserGetOneHandler UserGetOneHandler
	// UserUpdateHandler sets the operation handler for the user update operation
	UserUpdateHandler UserUpdateHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *ForumAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ForumAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ForumAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ForumAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ForumAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ForumAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ForumAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ForumAPI
func (o *ForumAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ClearHandler == nil {
		unregistered = append(unregistered, "ClearHandler")
	}

	if o.ForumCreateHandler == nil {
		unregistered = append(unregistered, "ForumCreateHandler")
	}

	if o.ForumGetOneHandler == nil {
		unregistered = append(unregistered, "ForumGetOneHandler")
	}

	if o.ForumGetThreadsHandler == nil {
		unregistered = append(unregistered, "ForumGetThreadsHandler")
	}

	if o.ForumGetUsersHandler == nil {
		unregistered = append(unregistered, "ForumGetUsersHandler")
	}

	if o.PostGetOneHandler == nil {
		unregistered = append(unregistered, "PostGetOneHandler")
	}

	if o.PostUpdateHandler == nil {
		unregistered = append(unregistered, "PostUpdateHandler")
	}

	if o.PostsCreateHandler == nil {
		unregistered = append(unregistered, "PostsCreateHandler")
	}

	if o.StatusHandler == nil {
		unregistered = append(unregistered, "StatusHandler")
	}

	if o.ThreadCreateHandler == nil {
		unregistered = append(unregistered, "ThreadCreateHandler")
	}

	if o.ThreadGetOneHandler == nil {
		unregistered = append(unregistered, "ThreadGetOneHandler")
	}

	if o.ThreadGetPostsHandler == nil {
		unregistered = append(unregistered, "ThreadGetPostsHandler")
	}

	if o.ThreadUpdateHandler == nil {
		unregistered = append(unregistered, "ThreadUpdateHandler")
	}

	if o.ThreadVoteHandler == nil {
		unregistered = append(unregistered, "ThreadVoteHandler")
	}

	if o.UserCreateHandler == nil {
		unregistered = append(unregistered, "UserCreateHandler")
	}

	if o.UserGetOneHandler == nil {
		unregistered = append(unregistered, "UserGetOneHandler")
	}

	if o.UserUpdateHandler == nil {
		unregistered = append(unregistered, "UserUpdateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ForumAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ForumAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *ForumAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *ForumAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *ForumAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ForumAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the forum API
func (o *ForumAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ForumAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service/clear"] = NewClear(o.context, o.ClearHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/forum/create"] = NewForumCreate(o.context, o.ForumCreateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forum/{slug}/details"] = NewForumGetOne(o.context, o.ForumGetOneHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forum/{slug}/threads"] = NewForumGetThreads(o.context, o.ForumGetThreadsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/forum/{slug}/users"] = NewForumGetUsers(o.context, o.ForumGetUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/post/{id}/details"] = NewPostGetOne(o.context, o.PostGetOneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/post/{id}/details"] = NewPostUpdate(o.context, o.PostUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/thread/{slug_or_id}/create"] = NewPostsCreate(o.context, o.PostsCreateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service/status"] = NewStatus(o.context, o.StatusHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/forum/{slug}/create"] = NewThreadCreate(o.context, o.ThreadCreateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/thread/{slug_or_id}/details"] = NewThreadGetOne(o.context, o.ThreadGetOneHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/thread/{slug_or_id}/posts"] = NewThreadGetPosts(o.context, o.ThreadGetPostsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/thread/{slug_or_id}/details"] = NewThreadUpdate(o.context, o.ThreadUpdateHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/thread/{slug_or_id}/vote"] = NewThreadVote(o.context, o.ThreadVoteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/{nickname}/create"] = NewUserCreate(o.context, o.UserCreateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/{nickname}/profile"] = NewUserGetOne(o.context, o.UserGetOneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/{nickname}/profile"] = NewUserUpdate(o.context, o.UserUpdateHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ForumAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ForumAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ForumAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ForumAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
