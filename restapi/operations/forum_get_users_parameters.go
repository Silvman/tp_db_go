// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewForumGetUsersParams creates a new ForumGetUsersParams object
// with the default values initialized.
func NewForumGetUsersParams() ForumGetUsersParams {

	var (
		// initialize parameters with default values

		limitDefault = int32(100)
	)

	return ForumGetUsersParams{
		Limit: &limitDefault,
	}
}

// ForumGetUsersParams contains all the bound params for the forum get users operation
// typically these are obtained from a http.Request
//
// swagger:parameters forumGetUsers
type ForumGetUsersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Флаг сортировки по убыванию.

	  In: query
	*/
	Desc *bool
	/*Максимальное кол-во возвращаемых записей.
	  Maximum: 10000
	  Minimum: 1
	  In: query
	  Default: 100
	*/
	Limit *int32
	/*Идентификатор пользователя, с которого будут выводиться пользоватли
	(пользователь с данным идентификатором в результат не попадает).

	  In: query
	*/
	Since *string
	/*Идентификатор форума.
	  Required: true
	  In: path
	*/
	Slug string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewForumGetUsersParams() beforehand.
func (o *ForumGetUsersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDesc, qhkDesc, _ := qs.GetOK("desc")
	if err := o.bindDesc(qDesc, qhkDesc, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qSince, qhkSince, _ := qs.GetOK("since")
	if err := o.bindSince(qSince, qhkSince, route.Formats); err != nil {
		res = append(res, err)
	}

	rSlug, rhkSlug, _ := route.Params.GetOK("slug")
	if err := o.bindSlug(rSlug, rhkSlug, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDesc binds and validates parameter Desc from query.
func (o *ForumGetUsersParams) bindDesc(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("desc", "query", "bool", raw)
	}
	o.Desc = &value

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *ForumGetUsersParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewForumGetUsersParams()
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int32", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *ForumGetUsersParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.Minimum("limit", "query", float64(*o.Limit), 1, false); err != nil {
		return err
	}

	if err := validate.Maximum("limit", "query", float64(*o.Limit), 10000, false); err != nil {
		return err
	}

	return nil
}

// bindSince binds and validates parameter Since from query.
func (o *ForumGetUsersParams) bindSince(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Since = &raw

	return nil
}

// bindSlug binds and validates parameter Slug from path.
func (o *ForumGetUsersParams) bindSlug(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Slug = raw

	return nil
}
