// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ThreadGetPostsHandlerFunc turns a function with the right signature into a thread get posts handler
type ThreadGetPostsHandlerFunc func(ThreadGetPostsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ThreadGetPostsHandlerFunc) Handle(params ThreadGetPostsParams) middleware.Responder {
	return fn(params)
}

// ThreadGetPostsHandler interface for that can handle valid thread get posts params
type ThreadGetPostsHandler interface {
	Handle(ThreadGetPostsParams) middleware.Responder
}

// NewThreadGetPosts creates a new http.Handler for the thread get posts operation
func NewThreadGetPosts(ctx *middleware.Context, handler ThreadGetPostsHandler) *ThreadGetPosts {
	return &ThreadGetPosts{Context: ctx, Handler: handler}
}

/*ThreadGetPosts swagger:route GET /thread/{slug_or_id}/posts threadGetPosts

Сообщения данной ветви обсуждения

Получение списка сообщений в данной ветке форуме.

Сообщения выводятся отсортированные по дате создания.


*/
type ThreadGetPosts struct {
	Context *middleware.Context
	Handler ThreadGetPostsHandler
}

func (o *ThreadGetPosts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewThreadGetPostsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
